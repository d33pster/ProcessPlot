#!/usr/bin/env python

from tkinter import *
from tkinter import ttk
import os, time, psutil, socket, subprocess
from signal import *
from datetime import datetime
import pandas as pd

class prop:
    def __init__(self, master, df):
        self.parent = master
        
        #setup notebook
        self.notebook = ttk.Notebook(master) #notebook init
        self.notebook.pack(fill=BOTH, expand=True)
        
        self.frame1 = ttk.Frame(self.notebook) #frame1 ~~ ALL
        self.frame2 = ttk.Frame(self.notebook) #frame2 ~~ CPU
        self.frame3 = ttk.Frame(self.notebook) #frame3 ~~ Memory
        self.frame4 = ttk.Frame(self.notebook) #frame4 ~~ KILL
        self.notebook.add(self.frame1, text='ALL')
        self.notebook.add(self.frame2, text='CPU')
        self.notebook.add(self.frame3, text='Memory')
        self.notebook.add(self.frame4, text='KILL')
        
        #setup ALL ~~ frame 1
        self.frame1child1 = ttk.Frame(self.frame1)
        self.frame1child1.pack(fill=BOTH)
        self.all = Text(self.frame1child1)
        self.all.pack(fill=BOTH)
        self.all.insert(END, df.to_string())
        
        #setup CPU ~~ frame2
        self.frame2child1 = ttk.Frame(self.frame2)
        self.frame2child1.pack(fill=BOTH)
        self.CPU = Text(self.frame2child1)
        self.CPU.pack(fill=BOTH)
        cpu_df = df[['pid', 'name', 'cpu_usage', 'read_bytes', 'write_bytes', 'status', 'create_time', 'n_threads', 'cores']].sort_values(by='cpu_usage', ascending=False)
        self.CPU.insert(END, cpu_df.to_string())
        
        #setup Memory ~~ frame3
        self.frame3child1 = ttk.Frame(self.frame3)
        self.frame3child1.pack(fill=BOTH)
        self.mem = Text(self.frame3child1)
        self.mem.pack(fill=BOTH)
        mem_df = df[['pid', 'name', 'memory_usage', 'read_bytes', 'write_bytes', 'status', 'create_time', 'n_threads', 'cores']].sort_values(by='memory_usage', ascending=False)
        self.mem.insert(END, mem_df.to_string())

        #setup Kill ~~ frame4
        self.frame4child1 = ttk.Frame(self.frame4)
        self.frame4child1.pack(fill=BOTH)
        self.frame4child1label1 = ttk.Label(self.frame4child1, text='Enter Pid of the process to kill', justify=CENTER)
        self.frame4child1label1.pack()
        self.frame4child2 = ttk.Frame(self.frame4)
        self.frame4child2.pack(fil=BOTH)
        self.frame4child2entry1 = ttk.Entry(self.frame4child2, width=30, justify=CENTER)
        self.frame4child2entry1.pack()
        self.emptyText = StringVar()
        self.emptyText.set('')
        self.frame4child2entry1.config(textvariable=self.emptyText)
        self.frame4child3 = ttk.Frame(self.frame4)
        self.frame4child3.pack(fill=BOTH)
        self.frame4child3button1 = ttk.Button(self.frame4child3, text='[KILL]', command=self.kill)
        self.frame4child3button1.pack()
        self.frame4child4 = ttk.Frame(self.frame4)
        self.frame4child4.pack(fill=BOTH)
        self.killednotification = StringVar()
        self.killednotification.set('')
        self.frame4child4label1 = ttk.Label(self.frame4child4, textvariable=self.killednotification, justify=CENTER)
        self.frame4child4label1.pack()
    
    def kill(self):
        os.kill(int(self.frame4child2entry1.get().strip()), SIGINT)
        self.killednotification.set(f'Killed process: {self.frame4child2entry1.get()}')
        self.frame4child4label1.after(2000, self.clean_kill_notification)
    
    def clean_kill_notification(self):
        self.killednotification.set('')
        self.emptyText.set('')
        
def updater():
    first_output = os.system('python prop-call2.dat -n 0')
    time.sleep(5)
    df = pd.read_csv('update.csv')
    return df

def main():
    df = updater()
    hostname = socket.gethostname()
    root = Tk()
    root.title(f"Process Plot ~ running on {hostname}")
    root.geometry("1150x410")
    app = prop(root, df=df)
    root.mainloop()
    
    

if __name__=='__main__':main()